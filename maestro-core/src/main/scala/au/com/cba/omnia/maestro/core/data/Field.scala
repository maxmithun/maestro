//   Copyright 2014 Commonwealth Bank of Australia
//
//   Licensed under the Apache License, Version 2.0 (the "License");
//   you may not use this file except in compliance with the License.
//   You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
//   Unless required by applicable law or agreed to in writing, software
//   distributed under the License is distributed on an "AS IS" BASIS,
//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//   See the License for the specific language governing permissions and
//   limitations under the License.

package au.com.cba.omnia.maestro.core
package data

/**
  * Represents a field of `A` with type `B`. It has the name of the field and a getter given an
  * instance of `A`.
  */
case class Field[A : Manifest, B : Manifest](name: String, get: A => B) {
  val typeA = manifest[A]
  val typeB = manifest[B]

  /**
   * Fields are consider equal if name and type of column are equal
   * Notice that this function will be working correctly only with Fields generated by FieldsMacro.
   * Do not try to use it with custom created fields.
   */
  override def equals(other: Any): Boolean = other match {
    case f: Field[_, _] => typeA == f.typeA && typeB == f.typeB && name == f.name
    case _              => false
  }

  override def hashCode: Int = (name.hashCode * 41 + typeA.hashCode) * 41 + typeB.hashCode
}
